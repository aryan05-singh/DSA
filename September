//<-------------------------------------------------------------------------------------------DAY-1-03/09/24-------------------------------------------------------------------------------------------->
53.MAX SUBARRAY LEETCODE
<---------------USING KADANE'S ALGO------------------>
class Solution {
public:
    int maxSubArray(vector<int>& nums) {

        int sum = 0;
        int maxi = nums[0];

        for(int i = 0; i < nums.size();i++){
             
             sum = sum + nums[i];
             maxi = max(maxi,sum);
             if(sum<0){
                sum = 0;
             }
        }

        return maxi;
    }
};

11.Container With Most Water/Day - 2
class Solution {
public:
    int maxArea(vector<int>& height) {
        
        int n = height.size();
        int i = 0;
        int j = n-1;
        int maxArea = 0;

        int pro = 0;
        while(i < j)
        {
            int l = j - i;

            if(height[i] < height[j]){
                pro = height[i] * l;
                i++;
            }
            else {
                pro = height[j] * l;
                j--;
            }

            if(pro > maxArea){
                maxArea = pro;
            }
        }

        return maxArea;
    }
};


202. Happy Number on Leetcode/Day - 3
class Solution {
public:
    bool isHappy(int n) {

        if(n==1){
            return true;
        }
        if(n==4){
            return false;
        }
        int sum = 0;
        while(n>0){
                int rem = n % 10;
                sum += rem * rem;
                n = n /10;
        }
        return isHappy(sum);
    }
};

1877. Minimize Maximum Pair Sum in Array/Day - 4
class Solution {
public:
    int minPairSum(vector<int>& nums) {

sort(nums.begin(),nums.end());

int i = 0;
int j = nums.size() - 1;
int max = 0;
while(i <= j){
      int x = nums[i] + nums[j];
      i++;
      j--;
      if(x > max){
    max = x;
}
}

 return max;       
        
    }
};

503. Next Greater Element II/day - 5
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        int n = nums.size();
        vector<int> vec(n, -1);  
        
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < n; j++) {
                int index = (i + j) % n;  // To wrap around circularly
                if (nums[index] > nums[i]) {
                    vec[i] = nums[index];
                    break;
                }
            }
        }
        
        return vec;
    }
};

2. Add two numbers/Day - 5
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

        ListNode* l3 = new ListNode(0); 
        ListNode* head = l3;
        int carry = 0;

        while (l1 != nullptr || l2 != nullptr) {
            int sum = carry;

            if (l1 != nullptr) {
                sum += l1->val;
                l1 = l1->next;
            }

            if (l2 != nullptr) {
                sum += l2->val;
                l2 = l2->next;
            }

            carry = sum / 10;
            l3->next = new ListNode(sum % 10);
            l3 = l3->next;
        }

       
        if (carry > 0) {
            l3->next = new ListNode(carry);
        }

        return head->next;  
    }
};

